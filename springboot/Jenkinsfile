#!/usr/bin/env groovy

def sendFailureEmail() {
    def content = "Build for branch ${env.BRANCH_NAME} Failed."
    def info = 'Check the attached log or log into jenkins'
    emailext(
        mimeType: "text/html; charset=UTF-8",
        to: "josegar0218@gmail.com",
        recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: "RequesterRecipientProvider"]],
        body: "${content}<br/>${info}<br/>",
        subject: "Jenkins: Your build ${env.BRANCH_NAME} - Build #${env.BUILD_NUMBER} - Failed!",
        attachLog: true,
        attachmentsPattern: 'reports.zip'
    )
}

node() {
    try{

        
       def ecrUri = "382356559478.dkr.ecr.us-east-1.amazonaws.com"
        
        stage("Setup"){
            checkout scm
        }
        dir("springboot"){
        stage("Test") {
            withMaven(maven: 'maven', jdk: 'jdk') {
                sh("mvn clean test")
            }
        }
        stage("Build JAR artifact") {
            withMaven(maven: 'maven', jdk: 'jdk') {
                sh(" mvn clean package")
            }
        }
        stage("Build Docker image"){
            dockerImage = docker.build("${ecrUri}/jsgd/demoback")
        }
        stage("Push Docker image"){
                script {
                sh("aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ecrUri}")
                dockerImage.push('latest')
                }
                
            }


        }
        dir("helm"){
        
        stage("Deploy with Helm"){
            
            sh("echo $HOME")
            sh("kubectl config view --raw")
            sh("cat ~/.kube/config")
            sh("export KUBECONFIG=~/.kube/config")
            sh("helm install demoback . -v20")
        }
            


        }
    
    
    } catch(error) {
        throw error
		sendFailureEmail()
    } finally {
        cleanWs()
    }
}